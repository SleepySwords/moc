name: Continuous Deployment

on:
  push:
    tags:
    - "*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly

permissions:
  contents: read

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      upload-url: ${{ steps.create-release-draft.outputs.upload_url }}
    steps:
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event.inputs.tag_name == 'nightly'
        run: |
          echo "PRERELEASE=true" >> $GITHUB_ENV
          echo "SUBJECT=Prelease of moc" >> $GITHUB_ENV
      - if: github.event.inputs.tag_name != 'nightly'
        run: |
          echo "PRERELEASE=false" >> $GITHUB_ENV
          echo "SUBJECT=Release of moc $TAG_NAME" >> $GITHUB_ENV
      - name: Create release draft
        id: create-release-draft
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          disable-autolabeler: true
          tag: ${{ env.TAG_NAME }}
          name: ${{ env.SUBJECT }}
          prerelease: ${{ env.PRERELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dist:
    permissions:
      contents: write
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest, macos-13]
        include:
          - os: windows-latest
            build: windows-x86_64
            friendly_name: windows
          - os: macos-13
            build: x86_64-apple-darwin
            friendly_name: macos-x86
          - os: macos-latest
            build: aarch64-apple-darwin
            friendly_name: macos-arch
          - os: ubuntu-latest
            build: linux-x86_64
            friendly_name: linux
    runs-on: ${{ matrix.os }}
    needs: create-release
    name: Releases to ${{ matrix.friendly_name }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: 9.6.6
          cabal-version: 3.10.2.1
      - name: Build
        shell: bash
        run: |
          staging="moc_${{ matrix.build }}"
          mkdir -p "$staging"
          cabal update
          BUILD_PATH=$(cabal build | grep "Linking" | sed 's/.*Linking \(.*\)/\1/')
          cabal build
          cp $BUILD_PATH "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
      - name: Upload
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
